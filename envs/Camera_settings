Assuming usage of D435 (fov: 69)

---------------------------------------------------------------------------------------------------------------------------------------
Global Camera

self._view_matrix_obs = bullet.get_view_matrix(
    target_pos=[0.7, -0.2, 1.3], distance=0.4,  # [0.8, 0, 1.5], distance=0.8,
    yaw=90, pitch=-20, roll=0, up_axis_index=2)
self._projection_matrix_obs = bullet.get_projection_matrix(
    self.obs_img_dim, self.obs_img_dim)
            
            
######################################## "RENDERDING" ########################################
##############################################################################################

def render_obs(self):
    img, depth, segmentation = bullet.render(
        self.obs_img_dim, self.obs_img_dim, self._view_matrix_obs,
        self._projection_matrix_obs, shadow=0, gaussian_width=5)
    if self._transpose_image:
        img = np.transpose(img, (2, 0, 1))
    return img

def render_obs_active(self):
    eef_pos_for_active_camera = self.get_end_effector_pos()
    eef_pos_for_active_camera = [float(eef_pos_for_active_camera[0]+0.15),float(eef_pos_for_active_camera[1]),float(eef_pos_for_active_camera[2])]
    eef_theta_for_active_camera = self.get_end_effector_theta()
    #print(eef_pos_for_active_camera)
    #print('Total',eef_theta_for_active_camera)
    # print('x',eef_theta_for_active_camera[0])
    # print('y',eef_theta_for_active_camera[1])
    # print('z',eef_theta_for_active_camera[2])

    view_matrix_obs_active = bullet.get_view_matrix(
        target_pos=eef_pos_for_active_camera, distance=0.35,
        yaw=eef_theta_for_active_camera[0], pitch=eef_theta_for_active_camera[1]-90, roll=eef_theta_for_active_camera[2]-270, up_axis_index=2)
    projection_matrix_obs_active = bullet.get_projection_matrix(
        self.obs_img_dim_active, self.obs_img_dim_active)

    img_active, depth, segmentation = bullet.render(
        self.obs_img_dim_active, self.obs_img_dim_active, view_matrix_obs_active,
        projection_matrix_obs_active, shadow=0, gaussian_width=0)
    if self._transpose_image:
        img_active = np.transpose(img_active, (2, 0, 1))
    return img_active


######################################## "RENDERDING" ########################################

p.ER_TINY_RENDERER VERSION

def render_obs(self):

    img_tuple1 = p.getCameraImage(width=self.obs_img_dim,
                     height=self.obs_img_dim,
                     viewMatrix=self._view_matrix_obs,
                     projectionMatrix=self._projection_matrix_obs,
                     shadow=1,
                     lightDirection=[1, 1, 1],
                     renderer=p.ER_TINY_RENDERER)
    _, _, img1, depth, segmentation = img_tuple1

    img = img1[:, :, :-1]

    if self._transpose_image:
        img = np.transpose(img, (2, 0, 1))
    return img

def render_obs_active(self):
    eef_pos_for_active_camera = self.get_end_effector_pos()
    eef_pos_for_active_camera = [float(eef_pos_for_active_camera[0]+0.15),float(eef_pos_for_active_camera[1]),float(eef_pos_for_active_camera[2])]
    eef_theta_for_active_camera = self.get_end_effector_theta()
    #print(eef_pos_for_active_camera)
    #print('Total',eef_theta_for_active_camera)
    # print('x',eef_theta_for_active_camera[0])
    # print('y',eef_theta_for_active_camera[1])
    # print('z',eef_theta_for_active_camera[2])

    view_matrix_obs_active = bullet.get_view_matrix(
        target_pos=eef_pos_for_active_camera, distance=0.35,
        yaw=eef_theta_for_active_camera[0], pitch=eef_theta_for_active_camera[1]-90, roll=eef_theta_for_active_camera[2]-270, up_axis_index=2)
    projection_matrix_obs_active = bullet.get_projection_matrix(
        self.obs_img_dim_active, self.obs_img_dim_active)

    img_tuple2 = p.getCameraImage(width=self.obs_img_dim_active,
                     height=self.obs_img_dim_active,
                     viewMatrix=view_matrix_obs_active,
                     projectionMatrix=projection_matrix_obs_active,
                     shadow=1,
                     lightDirection=[1, 1, 1],
                     renderer=p.ER_TINY_RENDERER)
    _, _, img2, depth2, segmentation2 = img_tuple2

    img_active = img2[:, :, :-1]

    if self._transpose_image:
        img_active = np.transpose(img_active, (2, 0, 1))
    return img_active













