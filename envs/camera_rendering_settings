def get_view_matrix(target_pos=[0, 0, 0], distance=0.1,
                    yaw=0, pitch=-90, roll=0, up_axis_index=2):
    view_matrix = p.computeViewMatrixFromYawPitchRoll(
        target_pos, distance, yaw, pitch, roll, up_axis_index)
    return view_matrix

#Adjust planes to prevent overload rendering
def get_projection_matrix(height, width, fov=60, near_plane=0.1, far_plane=5.5):
    aspect = width / height
    projection_matrix = p.computeProjectionMatrixFOV(fov, aspect, near_plane, far_plane)
    return projection_matrix

def render(height, width, view_matrix, projection_matrix,
           shadow=1, light_direction=[1,1,1], renderer=p.ER_BULLET_HARDWARE_OPENGL, gaussian_width=5):
    img_tuple = p.getCameraImage(width,
                                 height,
                                 view_matrix,
                                 projection_matrix,
                                 shadow=shadow,
                                 lightDirection=light_direction,
                                 renderer=renderer)
    _, _, img, depth, segmentation = img_tuple
    img = img[:,:,:-1]
    if gaussian_width > 0:
        img = cv2.GaussianBlur(img, (gaussian_width, gaussian_width), 0)
    return img, depth, segmentation
